{"version":3,"sources":["helpers/hooks.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useInput","initialValue","validations","useState","value","setValue","isDirty","setDirty","valid","isEmpty","setEmpty","isNumber","setIsNumber","isLetter","setIsLetter","minLengthError","setMinLengthError","lengthValue","setLengthValue","useEffect","validation","test","length","useValidation","onChange","e","target","onBlur","App","firstName","lastName","ID","textarea","minLength","className","type","name","placeholder","onClick","preventDefault","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4e493df.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\n\r\nconst useValidation = (value: string, validations: any) => {\r\n    const [isEmpty, setEmpty] = useState(true)\r\n    const [isNumber, setIsNumber] = useState(true)\r\n    const [isLetter, setIsLetter] = useState(true)\r\n    const [minLengthError, setMinLengthError] = useState(true)\r\n    const [lengthValue, setLengthValue] = useState(0)\r\n\r\n    useEffect(() => {\r\n        for (const validation in validations) {\r\n            switch (validation) {\r\n                case \"isEmpty\":\r\n                    value ? setEmpty(false) : setEmpty(true)\r\n                    break;\r\n                case \"isNumber\":\r\n                    if (/^[0-9]+$/.test(value)) {\r\n                        setIsNumber(false)\r\n                    } else setIsNumber(true)\r\n                    break;\r\n                case \"isLetter\":\r\n                    if (/^[а-яА-Я]+$/.test(value)) {\r\n                        setIsLetter(false)\r\n                    } else setIsLetter(true)\r\n                    break;\r\n                case \"minLength\":\r\n                    value.length < validations[validation] ? setMinLengthError(true) : setMinLengthError(false)\r\n                    setLengthValue(value.length)\r\n\r\n                    break;\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n    return {isEmpty, isNumber, isLetter, minLengthError, lengthValue}\r\n\r\n}\r\n\r\nexport const useInput = (initialValue: string, validations: ValidationsType) => {\r\n    const [value, setValue] = useState(initialValue)\r\n    const [isDirty, setDirty] = useState(false)\r\n    const valid = useValidation(value, validations)\r\n\r\n    const onChange = (e: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        setValue(e.target.value)\r\n    }\r\n\r\n    const onBlur = () => {\r\n        setDirty(true)\r\n    }\r\n\r\n    return {value, onChange, onBlur, isDirty, setDirty, ...valid}\r\n}\r\n\r\ntype ValidationsType = {\r\n    isEmpty?: boolean\r\n    minLength?: number\r\n    isNumber?: boolean\r\n    isLetter?: boolean\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport {useInput} from \"./helpers/hooks\";\n\nconst App = () => {\n    //validations принимает необходимые для валидации данные\n    const firstName = useInput('', {isEmpty: true, isLetter: true})\n    const lastName = useInput('', {isEmpty: true, isLetter: true})\n    const ID = useInput('', {isEmpty: true, isNumber: true})\n    const textarea = useInput('', {isEmpty: true, minLength: 100})\n\n    const handleClick = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault()\n        firstName.isEmpty && firstName.setDirty(true)\n        lastName.isEmpty && lastName.setDirty(true)\n        ID.isEmpty && ID.setDirty(true)\n        textarea.isEmpty && textarea.setDirty(true)\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"container\">\n                <form className=\"formContainer\">\n                    <h1>Оставьте отзыв</h1>\n                    <div className=\"inputBlock\">\n                        <div className=\"inputContainer\">\n                            <input className=\"input\"\n                                   type=\"text\"\n                                   onChange={firstName.onChange}\n                                   onBlur={firstName.onBlur}\n                                   value={firstName.value}\n                                   name=\"firstName\"\n                                   placeholder=\"Имя\"/>\n                            {(firstName.isDirty && firstName.isEmpty) &&\n                            <div className=\"errorInput\">Заполните поле</div>}\n                            {(!firstName.isEmpty && firstName.isLetter) &&\n                            <div className=\"messageInput\">Имя не должно содержать цифры и символы</div>}\n                        </div>\n                        <div className=\"inputContainer\">\n                            <input className=\"input\"\n                                   type=\"text\"\n                                   onChange={lastName.onChange}\n                                   onBlur={lastName.onBlur}\n                                   value={lastName.value}\n                                   name=\"lastName\"\n                                   placeholder=\"Фамилия\"/>\n                            {(lastName.isDirty && lastName.isEmpty) && <div className=\"errorInput\">Заполните поле</div>}\n                            {(!lastName.isEmpty && lastName.isLetter) &&\n                            <div className=\"messageInput\">Фамилия не должна содержать цифры и символы</div>}\n                        </div>\n                        <div className=\"inputContainer\">\n                            <input className=\"input\"\n                                   type=\"text\"\n                                   onChange={ID.onChange}\n                                   onBlur={ID.onBlur}\n                                   value={ID.value}\n                                   name=\"ID\"\n                                   placeholder=\"ID Профиля в БК\"/>\n                            {(ID.isDirty && ID.isEmpty) && <div className=\"errorInput\">Заполните поле</div>}\n                            {(!ID.isEmpty && ID.isNumber) &&\n                            <div className=\"messageInput\">Поле должно содержать цифры</div>}\n                        </div>\n                    </div>\n                    <div className=\"textareaBlock\">\n                        <span className=\"textareaSign\">Ваш отзыв (\n                            {\n                                textarea.lengthValue === 0\n                                    ? <span>Минимум 100 знаков</span>\n                                    : <span\n                                        className={textarea.lengthValue < 100 ? \"textareaSignRed\" : \"textareaSignGreen\"}>\n                                {textarea.lengthValue} знак\n                            </span>\n                            })\n                        </span>\n                        <textarea className=\"textarea\"\n                                  onChange={textarea.onChange}\n                                  onBlur={textarea.onBlur}\n                                  value={textarea.value}\n                                  placeholder=\"Напишите, что вам нравиться, а что мы можем исправить?\"/>\n                        {(textarea.isDirty && textarea.isEmpty) && <div className=\"errorInput\">Заполните поле</div>}\n                        {(!textarea.isEmpty && textarea.minLengthError) &&\n                        <div className=\"messageInput\">Минимальное количество символов 100</div>}\n                    </div>\n                    <button className=\"button\" onClick={handleClick}>Опубликовать</button>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}